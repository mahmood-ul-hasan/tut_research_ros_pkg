%YAML:1.0

#common parameters
imu_topic: "/imu0"
image_topic: "/camera/left/image_raw"
output_path: "~/catkin_ws/src/vins/vins_mono/saved_output"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 752
image_height: 480

#distCoeffs â€“ Output vector of distortion coefficients (k_1, k_2, p_1, p_2[, k_3[, k_4, k_5, k_6]]) of 4, 5, or 8 elements.
distortion_parameters:
   k1: -0.4056029974955945
   k2:  0.15310487535224113
   p1: -0.0006886532267972795
   p2: -0.0004232687025758541
projection_parameters:
   fx: 459.5308873546033
   fy: 459.99193670838787
   cx: 394.7660495536289
   cy: 247.4833916976106

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   # data: [-1, -0, 0,
   #         0, -1, 0, 
   #         0, 0, 1]

   data: [-1, 0,  0,
           0, -1,  0,
          -0, 0,  1]


#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   # data: [-0.071,  0.00073058, 0.01692973]
   data:  [-0.07014, 0.00738, 0.0014]
#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)


acc_n: 0.20088720961920065         # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.0200840321559479945       # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.0022869259200268854        # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 0.00024646659275537142       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.80655     # gravity magnitude


#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 1           # useful in real-time and large project
pose_graph_save_path: "~/catkin_ws/src/vins/vins_mono/saved_output" # save and load path

#unsynchronization parameters
estimate_td: 1                     # online estimate time offset between camera and imu
td: 0.01704491945282673                           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
